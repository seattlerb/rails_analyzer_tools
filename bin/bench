#!/usr/local/bin/ruby -w

Thread.abort_on_exception = true

require 'optparse'
require 'analyzer_tools/bench'

OptionParser.accept URI do |u,|
  begin
    URI.parse u if u
  rescue ArgumentError
    raise OptionParser::InvalidArgument, u
  end
end

uri = nil
requests = 1
concurrency = 1
ignore_count = 0
cookies = nil

opts = OptionParser.new do |opts|
  opts.banner = "Usage: #{$PROGRAM_NAME} [options]"
  opts.separator ""

  opts.on("-u", "--url URL", URI, "URL to access") do |val|
    uri = val
  end

  opts.on("-r", "--requests REQUESTS", Integer, "Requests to send") do |val|
    requests = val
  end

  opts.separator ""

  opts.on("-c", "--concurrency THREADS", Integer,
          "Concurrent requests to make") do |val|
            concurrency = val
          end

  opts.on("-C", "--cookies COOKIES",
          "Optional string to pass in the cookies header. Should be a semi-colon separated list of key-value pairs, e.g. 'name=value; name2=value2'") do |val|
            cookies = val
          end

  opts.on("-i", "--ignore N",
          "Number of initial fetch requests to exclude from the final stats. Useful if you know that the first request will be uncached.") do |val|
            ignore_count = val.to_i
          end

end

opts.parse!

if uri.nil? or requests.nil? then
  puts opts
  exit
end

bench = Bench.new uri, requests, concurrency, cookies
times = bench.run

puts "Total time: #{times[ignore_count..-1].inject(0) { |a,t| a + t }}"
puts "Average time: #{times[ignore_count..-1].inject(0) { |a,t| a + t } / (times.length - ignore_count)}"

